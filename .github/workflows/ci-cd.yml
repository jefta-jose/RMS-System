#this gives a name to the workflow
name: CI/CD Pipeline

#on - specifies when the workflow should be triggered
on:
  pull_request: # the workflow runs whenever a PR is created or updated
    branches:
      - staging # the workflow only runs when the PR is targeting the staging branch
      types: [opened, synchronize, reopened]
      # the above specify events that trigger the workflow
        # opened -> when the PR is first created
        # synchronize -> when new commits are pushed to an existing PR
        # reopened -> when a closed PR is reopened

jobs:
  check-feature-to-staging:
    runs-on: ubuntu-lates
    steps: # the below feteched the repository's code
      - name: Checkout code
        uses: actions/checkout@v3
    
        # the below prevents merging if there are debugging console statements
        # it uses grep to search for these patterns across all files
        # if consoles are founf the PR fails
      - name: Check for console.log || Console.WriteLine
        run: |
          if grep -r -E "console\.log\(|Console\.WriteLine\(" .; then
            echo "Log Statements found! Failing Test."
            exit 1
          else
            echo "No log statements found! Test Passed."
          fi

      #fetches the latest staging branch
      # tries to merge the PR branch ($GITHUB_HEAD_REF) into staging without commiting
      # if merge conflicts exist the job fails
      - name: Check for merge conflicts
        run: |
          git fetch origin staging
          git checkout staging
          git merge --no-ff --no-commit $GITHUB_HEAD_REF || true
          if git diff --check --diff-filter=U | grep -q '^'; then
            echo "Merge conflict detected! Failing Job."
            exit 1
          else
            echo "No Merge Conflicts Found"
          fi

    # this job ensures that the PR is approved and merged before proceeding

    require-approval-feature-to-staging:
      runs-on: ubuntu-latest
      if: github.event.pull_request.base.ref == 'staging'
      steps:
      - name: Check if PR was approved
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request approved and merged into staging"
          else
            echo "Pull request not approved or merged yet."
            exit 1
          fi


on:
  push:
    branches:
      - staging

jobs:
  # this job is going to require approval for staging to main
  require-approval-staging-to-main:
    runs-on: ubuntu-latest
    steps:
      - name: Check if staging was approved
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Staging branch approved and ready to merge to main."
          else 
            echo "Staging branch not approved or merged yet."
            exit 1
          fi

#this job automatically merges staging to main after approval
merge-staging-to-main:
  needs: require-approval-staging-to-main #This ensures that the require-approval-staging-to-main job must pass before this job runs.
  runs-on: ubuntu-latest
  steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Fetch latest changes
      run: |
        git fetch --all

    - name: Merge staging into Main
      run: |
        git config --global user.name "Github Actions"
        git config --global user.email "actions@github.com"
        git checkout main
        git merge origin/staging --no-ff -m "Merge staging to main" || {
          echo "Merge conflict detected! Manual resolution required."
          exit 1
        }
        git push origin main
